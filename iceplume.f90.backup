PROGRAM iceplume
!
! Load private module
!
  USE mod_iceplume
!
!  Imported variable declarations.
!
  integer :: ng = 1
  real(r8) :: Qbar = 250.0d0, Qt = 0.0d0, Qs = 0.0d0
!
! Local variable declarations.
!
  real(r8) :: pr, prRef
!
  CALL allocate_iceplume(ng)
!
! ==================================================================
! Read in some scalar parameters
  ngr = ng
  Nr = 40
  NTr = 3
  dy = 200.0d0
  dx = 200.0d0
! If checkCFL is activited, need to read in slow-mode time step
  IF (checkCFL) THEN
    dtr = 30.0d0
  ENDIF
!
! ==================================================================
! Read in profiles from OCEAN.
! ==================================================================
!
  open(unit=5, file='./iceplume_zw.txt')
  DO K = 1, Nr+1
    read(5, *)  PLUME(ng) % zW(K)
  ENDDO
  close(unit=5)
!
  open(unit=5, file='./iceplume_s.txt')
  DO K = 1, Nr
! temp and salt
    read(5, *)  PLUME(ng) % sAm(K)
!    PLUME(ng) % sAm(K) = 20.0d0
  ENDDO
  close(unit=5)
  open(unit=5, file='./iceplume_t.txt')
  DO K = 1, Nr
    read(5, *)  PLUME(ng) % tpAm(K)
!    PLUME(ng) % tpAm(K) = 5.0d0
  ENDDO
  close(unit=5)
  DO K = 1, Nr
! convert potential temp to in-situ temp
    prRef = 101.d3*1.d-4
    pr = prRef + &
      & (abs(PLUME(ng) % zW(K))*rho_ref*g)*1.d-4  ! [dbar]
    CALL SW_TEMP(PLUME(ng) % sAm(K),  &
               & PLUME(ng) % tpAm(K), &
               & pr, prRef, PLUME(ng) % tAm(K))
! tracers
    IF (useTracers) THEN
      DO iTracer = 3, NTr
        PLUME(ng) % trcAm(K, iTracer) = 0.0d0
      ENDDO
    ENDIF
! u/v, w
    PLUME(ng) % vAm(K) = 0.0d0
    PLUME(ng) % wAm(K) = 0.0d0
  ENDDO
! Discharge tracer concentration
  IF (useTracers .and. useInputTracers) THEN
    DO iTracer = 3, NTr
      PLUME(ng) % trcIni(iTracer) = 0.0d0
    ENDDO
  ELSE
    DO iTracer = 3, NTr
      PLUME(ng) % trcIni(iTracer) = 0.d0
    ENDDO
  ENDIF
! ==================================================================
  CALL iceplume_calc(ng, &
                   & Qbar,      &
                   & Qt, &
                   & Qs)
! Write to file for diagonse
  IF (useDebug) THEN
    open(unit=15, file='./plume_debug.txt')
    write(15, '(A3, 99 A12)')  'lev', 'zw', 'tAm', 't', &
      & 'sAm', 's', 'ent', 'det', 'r', 'a', 'w', 'mInt'
    DO K = 1, Nr
      write(15, '(I4, 99 E12.4)')  K, PLUME(ng) % zW(K), &
        & PLUME(ng) % tAm(K), PLUME(ng) % t(K), &
        & PLUME(ng) % sAm(K), PLUME(ng) % s(K), &
        & PLUME(ng) % ent(K), PLUME(ng) % det(K), &
        & PLUME(ng) % r(K), PLUME(ng) % a(K), &
        & PLUME(ng) % w(K), PLUME(ng) % mInt(K)
    ENDDO
    write(15, '(I4, 99 E12.4)')  41, PLUME(ng) % zW(Nr+1), &
      & PLUME(ng) % tAm(Nr+1), 0.0d0, &
      & PLUME(ng) % sAm(Nr+1), 0.0d0, &
      & 0.0d0, 0.0d0, &
      & PLUME(ng) % r(Nr+1), PLUME(ng) % a(Nr+1), &
      & PLUME(ng) % w(Nr+1), PLUME(ng) % mInt(Nr+1)
    close(unit=15)
  ENDIF
END PROGRAM
